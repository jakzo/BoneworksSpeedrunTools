// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bwr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Player : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Player GetRootAsPlayer(ByteBuffer _bb) { return GetRootAsPlayer(_bb, new Player()); }
  public static Player GetRootAsPlayer(ByteBuffer _bb, Player obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bwr.Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (Bwr.Vector3?)(new Bwr.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Rotation { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public Bwr.Headset? Headset { get { int o = __p.__offset(8); return o != 0 ? (Bwr.Headset?)(new Bwr.Headset()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bwr.Controller? ControllerLeft { get { int o = __p.__offset(10); return o != 0 ? (Bwr.Controller?)(new Bwr.Controller()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Bwr.Controller? ControllerRight { get { int o = __p.__offset(12); return o != 0 ? (Bwr.Controller?)(new Bwr.Controller()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static void StartPlayer(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Bwr.Vector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, float rotation) { builder.AddFloat(1, rotation, 0.0f); }
  public static void AddHeadset(FlatBufferBuilder builder, Offset<Bwr.Headset> headsetOffset) { builder.AddOffset(2, headsetOffset.Value, 0); }
  public static void AddControllerLeft(FlatBufferBuilder builder, Offset<Bwr.Controller> controllerLeftOffset) { builder.AddOffset(3, controllerLeftOffset.Value, 0); }
  public static void AddControllerRight(FlatBufferBuilder builder, Offset<Bwr.Controller> controllerRightOffset) { builder.AddOffset(4, controllerRightOffset.Value, 0); }
  public static Offset<Bwr.Player> EndPlayer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // position
    builder.Required(o, 8);  // headset
    builder.Required(o, 10);  // controller_left
    builder.Required(o, 12);  // controller_right
    return new Offset<Bwr.Player>(o);
  }
}


}
