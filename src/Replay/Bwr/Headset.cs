// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bwr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Headset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Headset GetRootAsHeadset(ByteBuffer _bb) { return GetRootAsHeadset(_bb, new Headset()); }
  public static Headset GetRootAsHeadset(ByteBuffer _bb, Headset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Headset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bwr.Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (Bwr.Vector3?)(new Bwr.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Bwr.Vector3? RotationEuler { get { int o = __p.__offset(6); return o != 0 ? (Bwr.Vector3?)(new Bwr.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartHeadset(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Bwr.Vector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddRotationEuler(FlatBufferBuilder builder, Offset<Bwr.Vector3> rotationEulerOffset) { builder.AddStruct(1, rotationEulerOffset.Value, 0); }
  public static Offset<Bwr.Headset> EndHeadset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // position
    builder.Required(o, 6);  // rotation_euler
    return new Offset<Bwr.Headset>(o);
  }
}


}
